*git init - создать локальный репозиторий в текущем каталоге (скрытая папка .git)
*git add - добавить файл в список проиндексированных, все проиндексированные файлы будут сохранены в репозитории в состоянии в котором они были при выполнении команды. (добавить в индекс)
*git commit - создаёт коммит всех проиндексированных файлов (точка восстановления), ключ -a позволяет проиндексировать все уже отслеживаемые файлы без выполнения индексации, --amend заменит последний коммит
*git status - показывает статус файлов по сравнению с последним коммитом
*git diff - показывает ещё не проиндексированные изменения (сравнит последний add и текущее состояние) --staged - показывает изменения последней индексации
(сравнит последний add и последний commit)
*git rm - удаление файла из индекса и из рабочего каталога, --cached - удаление файла только из индекса (сделать неотслеживаемым)
*git mv - переименовать файл в индексе и в рабочей директории, равносильно $ mv README.txt README
					                                  					   $ git rm README.txt
					   	                           						   $ git add README
также перемещение файла в новый каталог, если вместо второго имени указать путь к нужной директории, равносильно
									  $ mv README dir
									  $ git add dir/README
									  $ git rm README
перемещение также нужно коммитить
*git log - история коммитов текущей ветки, --all - всех веток, -p покажет разницу привнесённую каждым коммитом, -3 покажет 3 последних коммита (-2 -- 2 и т.д.), --stat покажет небольшую статистическую сводку для каждого коммита, --graph покажет ASKII граф с историей ветвлений и слияний, --since, --after	Ограничить коммиты теми, которые сделаны после указанной даты, --until, --before Ограничить коммиты теми, которые сделаны до указанной даты, --author Показать только те коммиты, автор которых соответствует указанной строке, --pretty позваляет изменять формат вывода: 									--pretty=oneline - вывод в одну линию
							--pretty=format:"..." - полное задание формата с помощью следующих параметров:
%H	Хеш коммита
%h	Сокращённый хеш коммита
%T	Хеш дерева
%t	Сокращённый хеш дерева
%P	Хеши родительских коммитов
%p	Сокращённые хеши родительских коммитов
%an	Имя автора
%ae	Электронная почта автора
%ad	Дата автора (формат соответствует параметру --date=)
%ar	Дата автора, относительная (пр. "2 мес. назад")
%cn	Имя коммитера
%ce	Электронная почта коммитера
%cd	Дата коммитера
%cr	Дата коммитера, относительная
%s	Комментарий

*gitk - вызов графического интерфейса
*git reset - Перепишет текущую ветку, чтобы она указывала на нужный коммит (удалит лишние коммиты из ветки, к ним можно будет обратиться по хешу, в истории отобразятся только с опцией --all), так же сбросит индекс к состаянию, в котором он был на момент коммита, --hard обновит ещё и рабочий каталог в соответствии с коммитом. git reset HEAD просто откатит индекс к состоянию последнего коммита.
*git branch - создание новой ветки от текущего коммита, без аргументов показывает список веток, -v покажет последний коммит на каждой из веток, --no-merged показывает все не слитые с текущей ветки, --merged показывает все слитые с текущей ветки, -d удаляет ветку,
*git checkout - переход к ветке или коммиту, при этом изменения в рабочем каталоге примут вид последнего коммита этой ветки, -b создаёт новую ветку и переходит на неё, если указать имя файла из репозитория, то он заменит аналогичный в рабочей директории
*git merge - слияние указанной ветки (коммита) с текущей, если в двух ветках одна и та же часть файла была изменена по-разному, то возникает конфликт
*git tag - добавление тега к коммиту, по тегам к ним можно обращаться как и по хешу, без аргументов выведет список тегов в алфавитном порядке, -d удалит тег
*git revert - отмена коммита, в истории отобразится и сам коммит, и его удаление, HEAD - отмена последнего коммита, --no-edit - не запускать редактор для комментирования
*git rebase - перенос изменений на выбранную ветку с текущей, ветки будут объединены в одну, но слияния не произойдёт, --abort отмена ребазирования при конфликте, --continue продолжить ребазирование после устранения конфликта (перед этим нужно сделать добавить файл в индекс (git add)) --skip пропуск конфликта, при этом более старый коммит будет удалён, а более новый будет применён как исправление конфликта. Ребазирование создаёт копии коммитов ребазируемой ветки "сверху" указанной ветки, оригиналы коммитов остаются на месте, но на них больше ничего не указывает и они удалятся при следующем запуске сборщика мусора (git gc)
*git clone <name> <cloned_name> - клонирование репозитория (папка в которой находится .git)
*git fetch - скачивает изменения из удалённого репозитория, но не сливает их, если указать после имени репозитория имя ветки, то скачается только эта ветка
*git pull - берёт изменения из удалённого репозитория и сливает их, эквивалентно $ git fetch
																				 $ git merge origin/master
			--rebase вытянет все удалённые изменения, а поверх них наложит изменения из локального репозитория
если указать после имени репозитория имя ветки, то сольётся только выбранная ветка
*git clean -f -d - удалить из репозитория все неотслеживаемые папки и файлы (папки и файлы, добавленные в .gitignore останутся на месте)
*git stash добавить текущие изменения в хранилище (имитация коммита) list покажет текущий список изменений в хранилище, apply вытянет последнее изменение из 	хранилища, drop удалит последнее изменение из хранилища, clear полностью очистит хранилище, pop вытянет и удалит последнее изменение из хранилища, эквивалентно 																															 $ git stash apply
																		  													 $ git stash drop
*git remote покажет список удалённых репозиториев (локальных имён), add <имя> <ссылка> добавит ссылку к выбранному репозиторию под указанным именем (обычно origin)
*git push отправляет изменения в удалённый репозиторий --delete удалит выбранную ветку в удалённом репозитории
*git gc - сборщик мусора, удаляет все коммиты на которые не указывают ветки (например оригиналы веток после ребазирования)

Содержание папки .git
HEAD		  указывает на текущую ветку
config		  настройки
description	  для программы GitWeb
hooks/        клиентские и серверные перехватчики
index		  информация индекса
info/		  
objects/	  база данных коммитов и их хеши
refs/		  хеши последних коммитов каждой ветки в локальном и удалённых репозитриях, теги
